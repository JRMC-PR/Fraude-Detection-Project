#!usr/bin/env python3
'''script that generates a dummy csv file with random data for loginsRSA
    Hardcoded event types, countries, cities, and timezones for the purpose of this script
    in real data generation it would not be random but repetitive
    the script generates a csv file with 100 rows of random data for test, before running the script change to the inteded amount of rows
'''
import random
import pandas as pd
from faker import Faker

fake = Faker()

# Number of users
num_users = random.randint(80000, 85000)

# list for all types of events
EVENT_TYPE = [
    "PIN_REQUEST_CC_SUCCESS",
    "AA_SIGNATURE_PLUS_ACCEPT_TC",
    "AA_SIGNATURE_PLUS_VI_ACCEPT_TC",
    "ACCEPTED_DOCUMENTS",
    "ACCEPTED_UNICA_OFFER",
    "ACTIVATE_ATH_ERROR",
    "ACTIVATE_ATH_INT_ERROR",
    "ACTIVATE_ATH_INT_SUCCESS",
    "ACTIVATE_ATH_SUCCESS",
    "ACTIVATE_CC_ERROR",
    "ACTIVATE_CC_SUCCESS",
    "ACTIVATED_CCA_EBILL",
    "ACTIVATED_CCA_PURCHASE_SMS_ALERT",
    "ADD_AUTH_USER_ERROR",
    "ADD_PUSHNOTIFICATION_SUCCESS",
    "ADD_AUTH_USER_SUCCESS",
    "ADD_PUSHTOKEN_SUCCESS",
    "ADD_SMS_ALERTS",
    "ADDRESS_CHANGE",
    "ADVERTISING_COOKIES_ACTIVATION",
    "ADVERTISING_COOKIES_DEACTIVATION",
    "ANALYTICS_COOKIES_ACTIVATION",
    "ANALYTICS_COOKIES_DEACTIVATION",
    "ASSIGN_ATH_PIN_ERROR",
    "ASSIGN_ATH_PIN_SUCCESS",
    "ATHM_XFER_FAIL",
    "ATHM_XFER_SUCCESS",
    "BLACK_DUAL_ACCEPT_TC",
    "CARD_OFF_FAIL",
    "CARD_OFF_SUCCESS",
    "CARD_ON_FAIL",
    "CARD_ON_SUCCESS",
    "CHANGE_EMAIL_FAIL",
    "CHANGE_EMAIL_SUCCESS",
    "CHANGE_PASSWORD_FAIL",
    "CHANGE_PASSWORD_SUCCESS",
    "CHANGE_RSA_QUESTIONS_FAIL",
    "CHANGE_RSA_QUESTIONS_SUCCESS",
    "CHANGE_SMS_PHONE_FAIL",
    "CHANGE_SMS_PHONE_SUCCESS",
    "CHANGE_USERNAME_FAIL",
    "CHANGE_USERNAME_SUCCESS",
    "CREATE_SMS_PROFILE_FAIL",
    "CREATE_SMS_PROFILE_SUCCESS",
    "CUSTOMER_TENURE_BLOCK",
    "DCI_ANSWERS_COMPLETED",
    "DCI_CUSTOMER_CREATED",
    "DCI_ERROR_INSERT_IDA_CODE",
    "DCI_ERROR_INSERT_NO_POST",
    "DCI_ERROR_REMOVING_IDA_CODE",
    "DCI_ERROR_REMOVING_NO_POST",
    "DEACTIVATED_CCA_EBILL",
    "DEACTIVATED_CCA_PURCHASE_SMS_ALERT",
    "DELETE_PUSHNOTIFICATION_SUCCESS",
    "DELETE_SMS_ALERTS",
    "DELETE_SMS_PROFILE_FAIL",
    "DELETE_SMS_PROFILE_SUCCESS",
    "DEVICE_AUTH_BLOCK",
    "DEVICE_AUTH_EMAIL_FAIL",
    "DEVICE_AUTH_EMAIL_RESENT-",
    "DEVICE_AUTH_EMAIL_SENT",
    "DEVICE_AUTH_LIMIT_EXCEEDED",
    "DEVICE_AUTH_EMAIL_SUCCESS",
    "DEVICE_AUTH_NEW_DEVICE",
    "DEVICE_AUTH_SMS_FAIL",
    "DEVICE_AUTH_SMS_RESENT",
    "DEVICE_AUTH_SMS_SENT",
    "DEVICE_AUTH_SMS_SUCCESS",
    "DEVICE_AUTH_TENURE_BLOCK",
    "DEVICE_AUTH_TOKEN_AUTHORIZED",
    "DEVICE_AUTH_TOKEN_DENIED",
    "DEVICE_AUTH_TOKEN_EXPIRED",
    "DEVICE_AUTH_TOKEN_RESENT",
    "DEVICE_AUTH_TOKEN_SENT",
    "DOUBLE_ENROLLMENT_ATTEMPT",
    "EBPP2_UPDATE_EBILLS_STATUS",
    "EBPP2_UPDATE_STATEMENT_STATUS",
    "EMAIL_AUTHENTICATION_FAIL",
    "EMAIL_AUTHENTICATION_SUCCESS",
    "EMAIL_CHANGE",
    "EMPLOYER_CHANGE",
    "ENROLL_DOWNGRADE",
    "ENROLL_UPDATE_NONTRAS",
    "ENROLL_UPDATE_TRANS",
    "ENROLL_UPGRADE",
    "ENROLLMENT_OOB",
    "ENROLLMENT_SMS_OOB",
    "ENROLLMENT_VOICE_OOB",
    "ESIGN_FLAG_ADDED",
    "FAILED_TENURE_RULES",
    "FIS_ENROLLMENT_SUCCESS",
    "FREQUENCY_ALWAYS_OOB",
    "FREQUENCY_AS_REQUIRED_OOB",
    "FUNCTIONAL_COOKIES_ACTIVATION",
    "FUNCTIONAL_COOKIES_DEACTIVATION",
    "IN_APP_PROVISIONING_ERROR",
    "IN_APP_PROVISIONING_SUCCESS",
    "IN_APP_PROVISIONING_TSYS_ERROR",
    "IN_APP_VERIFICATION_ERROR",
    "IN_APP_VERIFICATION_SUCCESS",
    "INFO_SMS_ALERTS",
    "INTPG_CHANGE_EMAIL_FAIL",
    "INTPG_CHANGE_SMS_PHONE_SUCCESS",
    "INTPG_CHANGE_EMAIL_SUCCESS",
    "INTPG_ENROLLMENT_OOB",
    "INTPG_ENROLLMENT_SMS_OOB",
    "INTPG_ENROLLMENT_VOICE_OOB",
    "INTPG_FREQUENCY_AS_REQUIRED_OOB",
    "INTPG_INFO_SMS_ALERTS",
    "INVALID_USERNAME",
    "JB_MASTERCARD_ACCEPT_TC",
    "JB_MASTERCARD_ELEVA_ACCEPT_TC",
    "JB_MASTERCARD_ELEVA_VI_ACCEPT_TC",
    "JB_MASTERCARD_VI_ACCEPT_TC",
    "kOnOffPlasticInquirySuccess",
    "kOnOffPlasticUpdateBackendError",
    "kOnOffPlasticUpdateOffSuccess",
    "kOnOffPlasticUpdateOnSuccess",
    "LISTING_EBILLS_AND_STAMT_STATUS",
    "LOST_STOLEN_CC_REPORT_ERROR",
    "LOST_STOLEN_CC_REPORT_SUCCESS",
    "MBOP_ACCEPT_SHARE_INFO",
    "MBOP_CHANGE_PASSWORD_SUCCESS",
    "MBOP_INVALID_USERNAME",
    "MBOP_PASSWORD_RESET_BLOCK",
    "MBOP_PASSWORD_RESET_SUCCESS",
    "MBOP_PASSWORD_UNBLOCK",
    "MBOP_RSA_QUESTION_UNBLOCK",
    "MBOP_SIGNON_ATTEMPT_WHILE_PWD_BLOCKED",
    "MBOP_SIGNON_ATTEMPT_WHILE_RSA_BLOCKED",
    "MBOP_SIGNON_ATTEMPT_WHILE_RSA_DENIED",
    "MBOP_SIGNON_SUCCESS",
    "MBOP_VALIDATE_RSA_QUESTION_BLOCK",
    "MBOP_VALIDATE_RSA_QUESTION_FAIL",
    "MBOP_VALIDATE_RSA_QUESTION_SUCCESS",
    "MFA_EMAIL_FAIL",
    "MFA_EMAIL_RESEND",
    "MFA_EMAIL_SENT",
    "MFA_EMAIL_SUCCESS",
    "MFA_SMS_FAIL",
    "MFA_SMS_RESEND",
    "MFA_SMS_SENT",
    "MFA_SMS_SUCCESS",
    "MFA_VOICECALL_FAIL",
    "MFA_VOICECALL_GENERATED",
    "MFA_VOICECALL_RESEND",
    "MFA_VOICECALL_SUCCESS",
    "MOBILE_CASH_TR_ASSIGN_ATM",
    "MOBILE_CASH_TR_CANCEL",
    "MOBILE_CASH_TR_SUBMIT",
    "MYINFO_ADDRESS_CHANGE",
    "MYINFO_PHONE_CHANGE",
    "NO_AUTHENTICATION_PRESENTED",
    "NOT_ENROLLED_MFA",
    "OCCUPATION_CHANGE",
    "OOB_AUTHENTICATION_SUCCESS",
    "OOB_INTERRUPTION_PAGE_CONTINUE",
    "OOB_INTERRUPTION_PAGE_DISPLAY",
    "OOB_INTERRUPTION_PAGE_SKIP",
    "OUTREACH_CONFIRMATION",
    "OUTREACH_INTERRUPTION_CONFIRMATION",
    "OUTREACH_INTERRUPTION_SKIP",
    "PASSWORD_RESET_FAIL",
    "PASSWORD_RESET_SUCCESS",
    "PASSWORD_UNBLOCK",
    "PASSWORD_VALIDATION_BLOCK",
    "PASSWORD_VALIDATION_FAIL",
    "PASSWORD_VALIDATION_SUCCESS",
    "PAYEE_ADD",
    "PAYEE_DELETE",
    "PAYMENT_DELETE",
    "PAYMENT_MODIFY",
    "PAYMENT_SEND",
    "PHONE_NUMBER_CHANGE",
    "PIN_REQUEST_CC_ERROR",
    "PREMIATOKEN_SSO_FAIL",
    "RA_EMAIL_TOKEN_EXPIRED",
    "PREMIATOKEN_SSO_SUCCESS",
    "RA_EMAIL_TOKEN_REQUESTED",
    "RDC_TERMS_AND_CONDITIONS_ACCEPTED",
    "RECACCESS_EMAIL_FAIL",
    "RECACCESS_EMAIL_RESEND",
    "RECACCESS_EMAIL_SENT",
    "RECACCESS_EMAIL_SUCCESS",
    "RECACCESS_PASSWORDUPDATE_FAIL",
    "RECACCESS_PROFILEINFO_FAIL",
    "RECACCESS_PROFILEINFO_SUCCES",
    "RECACCESS_SMS_FAIL",
    "RECACCESS_SMS_RESEND",
    "RECACCESS_SMS_SENT",
    "RECACCESS_SMS_SUCCESS",
    "RECACCESS_TOKENEMAIL_EXPIRED",
    "RECACCESS_TOKENEMAIL_RESENT",
    "RECACCESS_TOKENEMAIL_SENT",
    "RECOVER_USERNAME_SUCCESS",
    "REGAIN_ACCESS_ACCT_FAIL",
    "REGAIN_ACCESS_ACCT_SUCCESS",
    "REGAIN_ACCESS_EMAIL_BLOCK",
    "REGAIN_ACCESS_PERSONAL_FAIL",
    "REGAIN_ACCESS_PERSONAL_SUCCESS",
    "REGISTER_SECONDARY_PHONE_OOB",
    "REMOTE_DEPOSIT_FAIL",
    "REMOTE_DEPOSIT_SUCCESS",
    "REMOVE_BY_RECOVERY_CODE_OOB",
    "REPORT_ATH_CARD_ERROR",
    "REPORT_ATH_CARD_SUCCESS",
    "REQUEST_CARD_ERROR",
    "REQUEST_CARD_SUCCESS",
    "RETIREMENT_PLAN_ACCESS",
    "RSA_BLOCKED",
    "RSA_QUESTION_UNBLOCK",
    "SIGNON_ATTEMPT_WHILE_PWD_BLOCKED",
    "SIGNON_ATTEMPT_WHILE_RSA_BLOCKED",
    "SIGNON_ATTEMPT_WHILE_RSA_DENIED",
    "SIGNON_SUCCESS",
    "TELEPAGO_NON_TRANS_ENROLLMENT_FAILED",
    "TELEPAGO_NON_TRANS_ENROLLMENT_SUCCESS",
    "TENURE_STATUS_ERROR",
    "TOKENIZATION_ACTIVATION_FAILED",
    "TOKENIZATION_ACTIVATION_SUCCESS",
    "TRANSFER_DELETE",
    "TRANSFER_SEND",
    "TRIP_NOTES_RESULT",
    "UPDATE_BANKING_ENT",
    "UPDATE_ENROLL_ACCT",
    "UPDATE_MLA_ESTMT_STATUS",
    "UPDATE_PUSHNOTIFICATION_SUCCESS",
    "UPDATE_PUSHTOKEN_SUCCESS",
    "UPDATE_SMS_ALERTS",
    "UPDATED_CCA_PURCHASE_SMS_ALERT",
    "VALIDATE_ACCOUNT_INF_BLOCK",
    "VALIDATE_ACCOUNT_INF_FAIL",
    "VALIDATE_ACCOUNT_INF_SUCCESS",
    "VALIDATE_RSA_QUESTION_BLOCK",
    "VALIDATE_RSA_QUESTION_FAIL",
    "VALIDATE_RSA_QUESTION_SUCCESS",
    "VIEW_CHECKIMAGE",
    "VIEW_DEPOSIT_RECIEPT_CHECKIMAGE",
    "VIEW_PDF_STMT",
    "VIEW_PDF_STMT_SHOW",
    "VISA_CASHREWARD_ACCEPT_TC",
    "VISA_CASHREWARD_VI_ACCEPT_TC",
    "VISA_PREMIA_ACCEPT_TC",
    "VISA_PREMIA_VI_ACCEPT_TC",
    "WALLET_EXTENSION_EVENT",
    "WIDGET"
]

# Mapping of countries to cities
country_city_map = {
    'pr': ['San Juan', 'Bayamon', 'Carolina', 'Ponce', 'Caguas', 'Aguadilla', 'Mayaguez', 'Ponce', 'Guaynabo'],
    'us': ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Philadelphia', 'San Antonio', 'San Diego', 'Dallas', 'San Jose'],
    'vi': ['Charlotte Amalie', 'Christiansted', 'Frederiksted', 'Cruz Bay', 'Hansen Bay', 'Sandy Point', 'St. Thomas', 'St. John', 'St. Croix', 'Lovango Cay']
}

# Mapping of countries to timezones
timezone_map = {
    'pr': "-4.0",
    'vi': "-4.0",
    'us': ["-5.0", "-6.0", "-7.0", "-8.0", "-9.0", "-10.0"]
}


# Function to format date
def format_date(date):
    return date.strftime("%d%b%Y:%H:%M:%S").upper()

# Number of rows to be created, changed for testing purposes
num_rows = 100

# Generate user data
users = [fake.user_name() for _ in range(num_users)]

# Function to generate random data for each column
def generate_data():
    user_name = random.choice(users)
    country = random.choice(list(country_city_map.keys()))
    city = random.choice(country_city_map[country])
    if country in ['pr', 'vi']:
        timezone = timezone_map[country]  # Directly assign the value
    else:
        timezone = random.choice(timezone_map['us'])
    return {
        "REPORT_DATE": format_date(fake.date_time_this_decade()),
        "LASTMODIFIED": format_date(fake.date_time_this_decade()),
        "EVENT_ID": fake.uuid4(),
        "USER_ID": user_name + fake.numerify(text="###"),
        "USER_NAME": user_name,
        "SESSION_ID": fake.uuid4(),
        "EVENT_TIME": format_date(fake.date_time_this_decade()),
        "EVENT_TYPE": random.choice(EVENT_TYPE),
        "USER_DEFINED_EVENT_TYPE": fake.word(),
        "PRELIMINARY_SCORE": random.randint(1, 100),
        "RISK_SCORE": random.randint(1, 100),
        "PREV_RISK_SCORE": random.randint(1, 100),
        "PREV_RISK_SCORE_DATE": format_date(fake.date_time_this_decade()),
        "RISK_1_CONTRIBUTOR": fake.word(),
        "RISK_1_SCORE": random.randint(1, 100),
        "RISK_2_CONTRIBUTOR": fake.word(),
        "RISK_2_SCORE": random.randint(1, 100),
        "RISK_3_CONTRIBUTOR": fake.word(),
        "RISK_3_SCORE": random.randint(1, 100),
        "RISK_4_CONTRIBUTOR": fake.word(),
        "RISK_4_SCORE": random.randint(1, 100),
        "POLICY_RULE_ID": fake.uuid4(),
        "POLICY_ACTION": fake.word(),
        "TEST_POLICY_RULE_ID": fake.uuid4(),
        "TEST_POLICY_ACTION": fake.word(),
        "CHALLENGE_AUTH_METHOD": fake.word(),
        "CHALLENGE_SUCCESSFUL": fake.boolean(),
        "FLAGGED": fake.boolean(),
        "RESOLUTION": fake.word(),
        "RESOLUTION_DATE": format_date(fake.date_time_this_decade()),
        "COOKIE": fake.md5(),
        "USER_AGENT_STRING_HASH": fake.md5(),
        "SOFTWARE_FINGERPRINT_HASH": fake.md5(),
        "BROWSER_PLUGINS_HASH": fake.md5(),
        "SCREEN_HASH": fake.md5(),
        "ACCEPT_LANGUAGE": fake.language_code(),
        "BROWSER_LANGUAGE": fake.language_code(),
        "TIMEZONE": timezone,
        "IP_ADDRESS": fake.ipv4(), #  GOOD
        "IP_COUNTRY": country, # GOOD
        "IP_REGION": fake.state(),
        "IP_CITY": city, # G
        "IP_ISP": fake.company(),
        "CHANNEL_INDICATOR": fake.word(),
        "IS_DEVICE_BOUND": fake.boolean(),
        "IS_FRAUD_SUSPECT": fake.boolean(),
        "FRAUD_SUSPECT_DATE": format_date(fake.date_time_this_decade()),
        "CALC_USER_RISK_SCORE": random.randint(1, 100),
        "USER_PERSISTENT": fake.boolean(),
        "DATA_S_1": fake.word(),
        "DATA_S_4": fake.word(),
        "PREV_DATA_S_4": fake.word(),
        "PREV_DATA_S_4_DATE": format_date(fake.date_time_this_decade()),
        "DATA_S_10": fake.word(),
        "DATA_S_11": fake.word(),
        "DATA_S_29": fake.word(),
        "DATA_S_30": fake.word(),
        "DATA_S_31": fake.word(),
        "DATA_S_34": fake.word(),
        "DATA_S_37": fake.word(),
        "PREV_DATA_S37": fake.word(),
        "PREV_DATA_S37_DATE": format_date(fake.date_time_this_decade()),
        "DATA_I_20": random.randint(1, 100),
        "DATA_I_23": random.randint(1, 100),
        "DATA_I_63": random.randint(1, 100),
        "DATA_S_76": fake.word(),
        "DATA_S_79": fake.word(),
        "MOBILE_AGE": random.randint(1, 10),
        "DATA_S_100": fake.word(),
        "TEST_RULE_FLAG": fake.boolean(),
        "DFP_AGE": random.randint(1, 10),
        "GEODISTANCE": random.uniform(0, 1000),
        "GEODATA_AGE": random.randint(1, 10),
        "OPERATING_SYSTEM": fake.word(),
        "BROWSER_TYPE": fake.word(),
        "BROWSER_VERSION": fake.word(),
        "IP_ISP_NAME": fake.company(),
        "IP_ISP_NAME_MODE": fake.word()
    }

# Generate the data
data = [generate_data() for _ in range(num_rows)]

# Create a DataFrame
df = pd.DataFrame(data)

# Save to CSV
df.to_csv("generated_loginsRSA.csv", index=False)

print("Data generation complete. Saved to 'generated_loginsRSA.csv'.")
